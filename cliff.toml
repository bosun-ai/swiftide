# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "bosun-ai"
repo = "swiftide"

[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
# note that the - before / after the % controls whether whitespace is rendered between each line.
# Getting this right so that the markdown renders with the correct number of lines between headings
# code fences and list items is pretty finicky. Note also that the 4 backticks in the commit macro
# is intentional as this escapes any backticks in the commit body.
body = """
{%- if not version %}
## [unreleased]
{% else -%}
## [{{ version }}](https://github.com/bosun-ai/swiftide/releases/tag/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
{% endif -%}

{% macro commit(commit) -%}
- [{{ commit.id | truncate(length=7, end="") }}]({{ "https://github.com/bosun-ai/swiftide/commit/" ~ commit.id }}) \
  *({{commit.scope | default(value = "uncategorized") | lower }})* {{ commit.message | upper_first | trim }}\
  {% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}\
  {% if commit.github.pr_number %} in [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}){%- endif %}\
{%- if (commit.github.username and commit.github.username is not containing("[bot]")) %}
  {%- if commit.breaking %} [**breaking**]{% endif %}
  {%- if commit.body %}

    ````text {#- 4 backticks escape any backticks in body #}
    {{commit.body | indent(prefix="  ") }}
    ````
  {%- endif %}
  {%- for footer in commit.footers %}
  {%- if footer.token != "Signed-off-by" and footer.token != "Co-authored-by" %}
    {{ footer.token | indent(prefix="  ") }}{{ footer.separator }}{{ footer.value }}
  {%- endif %}
{%- endfor %}
{%- endif %}
{% endmacro -%}

{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | striptags | trim | upper_first }}
{% for commit in commits | filter(attribute="scope") | sort(attribute="scope") %}
{{ self::commit(commit=commit) }}
{%- endfor -%}
{% for commit in commits %}
{%- if not commit.scope %}
{{ self::commit(commit=commit) }}
{%- endif -%}
{%- endfor -%}
{%- endfor %}

{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
### New Contributors
{%- endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
* @{{ contributor.username }} made their first contribution
{%- if contributor.pr_number %} in \
[#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
{%- endif %}
{%- endfor -%}

{% if version %}
{% if previous.version %}
**Full Changelog**: {{ self::remote_url() }}/compare/{{ previous.version }}...{{ version }}
{% endif %}
{% else -%}
  {% raw %}\n{% endraw %}
{% endif %}

{%- macro remote_url() -%}
https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
{% endmacro %}
"""


# remove the leading and trailing whitespace from the template
trim = false
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
  { pattern = '(better safe shared layout cache)', replace = "perf(layout): ${1}" },
  { pattern = '(Clarify README.md)', replace = "docs(readme): ${1}" },
  { pattern = '(Update README.md)', replace = "docs(readme): ${1}" },
  { pattern = '(fix typos|Fix typos)', replace = "fix: ${1}" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 00 -->Features" },
  { message = "^[fF]ix", group = "<!-- 01 -->Bug Fixes" },
  { message = "^refactor", group = "<!-- 02 -->Refactor" },
  { message = "^doc", group = "<!-- 03 -->Documentation" },
  { message = "^perf", group = "<!-- 04 -->Performance" },
  { message = "^style", group = "<!-- 05 -->Styling" },
  { message = "^test", group = "<!-- 06 -->Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(changelog\\)", skip = true },
  { message = "^[cC]hore", group = "<!-- 07 -->Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 08 -->Security" },
  { message = "^build", group = "<!-- 09 -->Build" },
  { message = "^ci", group = "<!-- 10 -->Continuous Integration" },
  { message = "^revert", group = "<!-- 11 -->Reverted Commits" },
  # handle some old commits styles from pre 0.4
  { message = "^(Buffer|buffer|Frame|frame|Gauge|gauge|Paragraph|paragraph):", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^\\[", group = "<!-- 07 -->Miscellaneous Tasks" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-rc.1"
# regex for ignoring tags
ignore_tags = "alpha"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
