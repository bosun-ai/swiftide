/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetMediaUploadUrlRequest {
    /// The trace ID associated with the media record
    #[serde(rename = "traceId")]
    pub trace_id: String,
    /// The observation ID associated with the media record. If the media record is associated directly with a trace, this will be null.
    #[serde(rename = "observationId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub observation_id: Option<Option<String>>,
    #[serde(rename = "contentType")]
    pub content_type: models::MediaContentType,
    /// The size of the media record in bytes
    #[serde(rename = "contentLength")]
    pub content_length: i32,
    /// The SHA-256 hash of the media record
    #[serde(rename = "sha256Hash")]
    pub sha256_hash: String,
    /// The trace / observation field the media record is associated with. This can be one of `input`, `output`, `metadata`
    #[serde(rename = "field")]
    pub field: String,
}

impl GetMediaUploadUrlRequest {
    pub fn new(trace_id: String, content_type: models::MediaContentType, content_length: i32, sha256_hash: String, field: String) -> GetMediaUploadUrlRequest {
        GetMediaUploadUrlRequest {
            trace_id,
            observation_id: None,
            content_type,
            content_length,
            sha256_hash,
            field,
        }
    }
}

