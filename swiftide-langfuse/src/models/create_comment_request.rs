/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateCommentRequest {
    /// The id of the project to attach the comment to.
    #[serde(rename = "projectId")]
    pub project_id: String,
    /// The type of the object to attach the comment to (trace, observation, session, prompt).
    #[serde(rename = "objectType")]
    pub object_type: String,
    /// The id of the object to attach the comment to. If this does not reference a valid existing object, an error will be thrown.
    #[serde(rename = "objectId")]
    pub object_id: String,
    /// The content of the comment. May include markdown. Currently limited to 3000 characters.
    #[serde(rename = "content")]
    pub content: String,
    /// The id of the user who created the comment.
    #[serde(rename = "authorUserId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub author_user_id: Option<Option<String>>,
}

impl CreateCommentRequest {
    pub fn new(project_id: String, object_type: String, object_id: String, content: String) -> CreateCommentRequest {
        CreateCommentRequest {
            project_id,
            object_type,
            object_id,
            content,
            author_user_id: None,
        }
    }
}

