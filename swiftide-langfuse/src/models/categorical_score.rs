/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CategoricalScore {
    /// Only defined if a config is linked. Represents the numeric category mapping of the stringValue
    #[serde(rename = "value", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub value: Option<Option<f64>>,
    /// The string representation of the score value. If no config is linked, can be any string. Otherwise, must map to a config category
    #[serde(rename = "stringValue")]
    pub string_value: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "traceId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub trace_id: Option<Option<String>>,
    #[serde(rename = "sessionId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<Option<String>>,
    #[serde(rename = "observationId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub observation_id: Option<Option<String>>,
    #[serde(rename = "datasetRunId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dataset_run_id: Option<Option<String>>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "source")]
    pub source: models::ScoreSource,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "authorUserId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub author_user_id: Option<Option<String>>,
    #[serde(rename = "comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Option<String>>,
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<serde_json::Value>>,
    /// Reference a score config on a score. When set, config and score name must be equal and value must comply to optionally defined numerical range
    #[serde(rename = "configId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub config_id: Option<Option<String>>,
    /// Reference an annotation queue on a score. Populated if the score was initially created in an annotation queue.
    #[serde(rename = "queueId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub queue_id: Option<Option<String>>,
    /// The environment from which this score originated. Can be any lowercase alphanumeric string with hyphens and underscores that does not start with 'langfuse'.
    #[serde(rename = "environment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub environment: Option<Option<String>>,
}

impl CategoricalScore {
    pub fn new(string_value: String, id: String, name: String, source: models::ScoreSource, timestamp: String, created_at: String, updated_at: String) -> CategoricalScore {
        CategoricalScore {
            value: None,
            string_value,
            id,
            trace_id: None,
            session_id: None,
            observation_id: None,
            dataset_run_id: None,
            name,
            source,
            timestamp,
            created_at,
            updated_at,
            author_user_id: None,
            comment: None,
            metadata: None,
            config_id: None,
            queue_id: None,
            environment: None,
        }
    }
}

