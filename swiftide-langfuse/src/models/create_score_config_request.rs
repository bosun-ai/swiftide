/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateScoreConfigRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "dataType")]
    pub data_type: models::ScoreDataType,
    /// Configure custom categories for categorical scores. Pass a list of objects with `label` and `value` properties. Categories are autogenerated for boolean configs and cannot be passed
    #[serde(rename = "categories", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Option<Vec<models::ConfigCategory>>>,
    /// Configure a minimum value for numerical scores. If not set, the minimum value defaults to -∞
    #[serde(rename = "minValue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub min_value: Option<Option<f64>>,
    /// Configure a maximum value for numerical scores. If not set, the maximum value defaults to +∞
    #[serde(rename = "maxValue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_value: Option<Option<f64>>,
    /// Description is shown across the Langfuse UI and can be used to e.g. explain the config categories in detail, why a numeric range was set, or provide additional context on config name or usage
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
}

impl CreateScoreConfigRequest {
    pub fn new(name: String, data_type: models::ScoreDataType) -> CreateScoreConfigRequest {
        CreateScoreConfigRequest {
            name,
            data_type,
            categories: None,
            min_value: None,
            max_value: None,
            description: None,
        }
    }
}

