/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MediaContentType : The MIME type of the media record
/// The MIME type of the media record
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaContentType {
    #[serde(rename = "image/png")]
    ImageSlashPng,
    #[serde(rename = "image/jpeg")]
    ImageSlashJpeg,
    #[serde(rename = "image/jpg")]
    ImageSlashJpg,
    #[serde(rename = "image/webp")]
    ImageSlashWebp,
    #[serde(rename = "image/gif")]
    ImageSlashGif,
    #[serde(rename = "image/svg+xml")]
    ImageSlashSvgPlusXml,
    #[serde(rename = "image/tiff")]
    ImageSlashTiff,
    #[serde(rename = "image/bmp")]
    ImageSlashBmp,
    #[serde(rename = "audio/mpeg")]
    AudioSlashMpeg,
    #[serde(rename = "audio/mp3")]
    AudioSlashMp3,
    #[serde(rename = "audio/wav")]
    AudioSlashWav,
    #[serde(rename = "audio/ogg")]
    AudioSlashOgg,
    #[serde(rename = "audio/oga")]
    AudioSlashOga,
    #[serde(rename = "audio/aac")]
    AudioSlashAac,
    #[serde(rename = "audio/mp4")]
    AudioSlashMp4,
    #[serde(rename = "audio/flac")]
    AudioSlashFlac,
    #[serde(rename = "video/mp4")]
    VideoSlashMp4,
    #[serde(rename = "video/webm")]
    VideoSlashWebm,
    #[serde(rename = "text/plain")]
    TextSlashPlain,
    #[serde(rename = "text/html")]
    TextSlashHtml,
    #[serde(rename = "text/css")]
    TextSlashCss,
    #[serde(rename = "text/csv")]
    TextSlashCsv,
    #[serde(rename = "application/pdf")]
    ApplicationSlashPdf,
    #[serde(rename = "application/msword")]
    ApplicationSlashMsword,
    #[serde(rename = "application/vnd.ms-excel")]
    ApplicationSlashVndPeriodMsExcel,
    #[serde(rename = "application/zip")]
    ApplicationSlashZip,
    #[serde(rename = "application/json")]
    ApplicationSlashJson,
    #[serde(rename = "application/xml")]
    ApplicationSlashXml,
    #[serde(rename = "application/octet-stream")]
    ApplicationSlashOctetStream,

}

impl std::fmt::Display for MediaContentType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::ImageSlashPng => write!(f, "image/png"),
            Self::ImageSlashJpeg => write!(f, "image/jpeg"),
            Self::ImageSlashJpg => write!(f, "image/jpg"),
            Self::ImageSlashWebp => write!(f, "image/webp"),
            Self::ImageSlashGif => write!(f, "image/gif"),
            Self::ImageSlashSvgPlusXml => write!(f, "image/svg+xml"),
            Self::ImageSlashTiff => write!(f, "image/tiff"),
            Self::ImageSlashBmp => write!(f, "image/bmp"),
            Self::AudioSlashMpeg => write!(f, "audio/mpeg"),
            Self::AudioSlashMp3 => write!(f, "audio/mp3"),
            Self::AudioSlashWav => write!(f, "audio/wav"),
            Self::AudioSlashOgg => write!(f, "audio/ogg"),
            Self::AudioSlashOga => write!(f, "audio/oga"),
            Self::AudioSlashAac => write!(f, "audio/aac"),
            Self::AudioSlashMp4 => write!(f, "audio/mp4"),
            Self::AudioSlashFlac => write!(f, "audio/flac"),
            Self::VideoSlashMp4 => write!(f, "video/mp4"),
            Self::VideoSlashWebm => write!(f, "video/webm"),
            Self::TextSlashPlain => write!(f, "text/plain"),
            Self::TextSlashHtml => write!(f, "text/html"),
            Self::TextSlashCss => write!(f, "text/css"),
            Self::TextSlashCsv => write!(f, "text/csv"),
            Self::ApplicationSlashPdf => write!(f, "application/pdf"),
            Self::ApplicationSlashMsword => write!(f, "application/msword"),
            Self::ApplicationSlashVndPeriodMsExcel => write!(f, "application/vnd.ms-excel"),
            Self::ApplicationSlashZip => write!(f, "application/zip"),
            Self::ApplicationSlashJson => write!(f, "application/json"),
            Self::ApplicationSlashXml => write!(f, "application/xml"),
            Self::ApplicationSlashOctetStream => write!(f, "application/octet-stream"),
        }
    }
}

impl Default for MediaContentType {
    fn default() -> MediaContentType {
        Self::ImageSlashPng
    }
}

