/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScimCreateUserRequest {
    /// User's email address (required)
    #[serde(rename = "userName")]
    pub user_name: String,
    #[serde(rename = "name")]
    pub name: Box<models::ScimName>,
    /// User's email addresses
    #[serde(rename = "emails", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub emails: Option<Option<Vec<models::ScimEmail>>>,
    /// Whether the user is active
    #[serde(rename = "active", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active: Option<Option<bool>>,
    /// Initial password for the user
    #[serde(rename = "password", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub password: Option<Option<String>>,
}

impl ScimCreateUserRequest {
    pub fn new(user_name: String, name: models::ScimName) -> ScimCreateUserRequest {
        ScimCreateUserRequest {
            user_name,
            name: Box::new(name),
            emails: None,
            active: None,
            password: None,
        }
    }
}

