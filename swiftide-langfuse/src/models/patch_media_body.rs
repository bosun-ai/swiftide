/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchMediaBody {
    /// The date and time when the media record was uploaded
    #[serde(rename = "uploadedAt")]
    pub uploaded_at: String,
    /// The HTTP status code of the upload
    #[serde(rename = "uploadHttpStatus")]
    pub upload_http_status: i32,
    /// The HTTP error message of the upload
    #[serde(rename = "uploadHttpError", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub upload_http_error: Option<Option<String>>,
    /// The time in milliseconds it took to upload the media record
    #[serde(rename = "uploadTimeMs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub upload_time_ms: Option<Option<i32>>,
}

impl PatchMediaBody {
    pub fn new(uploaded_at: String, upload_http_status: i32) -> PatchMediaBody {
        PatchMediaBody {
            uploaded_at,
            upload_http_status,
            upload_http_error: None,
            upload_time_ms: None,
        }
    }
}

