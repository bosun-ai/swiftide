/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetMediaResponse {
    /// The unique langfuse identifier of a media record
    #[serde(rename = "mediaId")]
    pub media_id: String,
    /// The MIME type of the media record
    #[serde(rename = "contentType")]
    pub content_type: String,
    /// The size of the media record in bytes
    #[serde(rename = "contentLength")]
    pub content_length: i32,
    /// The date and time when the media record was uploaded
    #[serde(rename = "uploadedAt")]
    pub uploaded_at: String,
    /// The download URL of the media record
    #[serde(rename = "url")]
    pub url: String,
    /// The expiry date and time of the media record download URL
    #[serde(rename = "urlExpiry")]
    pub url_expiry: String,
}

impl GetMediaResponse {
    pub fn new(media_id: String, content_type: String, content_length: i32, uploaded_at: String, url: String, url_expiry: String) -> GetMediaResponse {
        GetMediaResponse {
            media_id,
            content_type,
            content_length,
            uploaded_at,
            url,
            url_expiry,
        }
    }
}

