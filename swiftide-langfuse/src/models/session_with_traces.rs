/*
 * langfuse
 *
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SessionWithTraces {
    #[serde(rename = "traces")]
    pub traces: Vec<models::Trace>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "projectId")]
    pub project_id: String,
    /// The environment from which this session originated.
    #[serde(rename = "environment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub environment: Option<Option<String>>,
}

impl SessionWithTraces {
    pub fn new(traces: Vec<models::Trace>, id: String, created_at: String, project_id: String) -> SessionWithTraces {
        SessionWithTraces {
            traces,
            id,
            created_at,
            project_id,
            environment: None,
        }
    }
}

