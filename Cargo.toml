[workspace]
members = [
  "swiftide",
  "swiftide-core",
  "swiftide-integrations",
  "swiftide-indexing",

  "examples",
  "benchmarks",
  "swiftide-test-utils",
  "swiftide-macros",
]
resolver = "2"

[workspace.package]
version = "0.13.1"
edition = "2021"
license = "MIT"
readme = "README.md"
keywords = ["llm", "rag", "ai", "data", "openai"]
description = "Blazing fast, streaming pipeline library for AI applications"
categories = ["asynchronous"]
repository = "https://github.com/bosun-ai/swiftide-rs"
homepage = "https://swiftide.rs"

[profile.dev.package]
insta.opt-level = 3
similar.opt-level = 3

[workspace.dependencies]
anyhow = { version = "1.0" }
async-trait = { version = "0.1" }
derive_builder = { version = "0.20" }
futures-util = { version = "0.3" }
tokio = { version = "1.38", features = ["full"] }
tokio-stream = { version = "0.1" }
tracing = { version = "0.1", features = ["log"] }
num_cpus = { version = "1.16" }
pin-project-lite = { version = "0.2" }
itertools = { version = "0.13" }
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0" }
strum = { version = "0.26" }
strum_macros = { version = "0.26" }
lazy_static = { version = "1.5.0" }
chrono = { version = "0.4" }
indoc = { version = "2.0" }
regex = { version = "1.10.6" }
uuid = { version = "1.10", features = ["v3", "v4", "serde"] }

# Integrations
spider = { version = "2.2" }
async-openai = { version = "0.24" }
qdrant-client = { version = "1.10", default-features = false, features = [
  "serde",
] }
fluvio = { version = "0.23", default-features = false }
lancedb = { version = "0.10", default-features = false }
arrow-array = { version = "52.0", default-features = false }
arrow = { version = "52.2" }
parquet = { version = "52.2", default-features = false, features = ["async"] }

# Testing
test-log = "0.2.16"
testcontainers = { version = "0.22.0", features = ["http_wait"] }
mockall = "0.13.0"
temp-dir = "0.1.13"
wiremock = "0.6.0"
test-case = "3.3.1"
insta = { version = "1.39.0", features = ["yaml"] }

[workspace.lints.rust]
unsafe_code = "forbid"
unexpected_cfgs = { level = "warn", check-cfg = [
  'cfg(coverage,coverage_nightly)',
] }

[workspace.lints.clippy]
cargo = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
blocks_in_conditions = "allow"
must_use_candidate = "allow"
module_name_repetitions = "allow"
missing_fields_in_debug = "allow"
# Should be fixed asap
multiple_crate_versions = "allow"
