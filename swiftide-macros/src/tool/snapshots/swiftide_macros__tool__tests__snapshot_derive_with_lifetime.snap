---
source: swiftide-macros/src/tool/mod.rs
expression: "crate::test_utils::pretty_macro_output(&output)"
---
#[derive(
    ::swiftide::reexports::serde::Serialize,
    ::swiftide::reexports::serde::Deserialize,
    Debug
)]
pub struct HelloDeriveArgs {
    pub test: String,
}
#[async_trait::async_trait]
impl<'a> swiftide::chat_completion::Tool for HelloDerive<'a> {
    async fn invoke(
        &self,
        agent_context: &dyn swiftide::traits::AgentContext,
        raw_args: Option<&str>,
    ) -> std::result::Result<
        swiftide::chat_completion::ToolOutput,
        ::swiftide::chat_completion::errors::ToolError,
    > {
        let Some(args) = raw_args else {
            return Err(
                ::swiftide::chat_completion::errors::ToolError::MissingArguments(
                    format!("No arguments provided for {}", "hello_derive"),
                ),
            )
        };
        let args: HelloDeriveArgs = ::swiftide::reexports::serde_json::from_str(&args)?;
        return self.hello_derive(agent_context, &args.test).await;
    }
    fn name<'TOOL>(&'TOOL self) -> std::borrow::Cow<'TOOL, str> {
        "hello_derive".into()
    }
    fn tool_spec(&self) -> swiftide::chat_completion::ToolSpec {
        swiftide::chat_completion::ToolSpec::builder()
            .name("hello_derive")
            .description("Hello derive")
            .parameters(
                vec![
                    swiftide::chat_completion::ParamSpec::builder().name("test")
                    .description("test param")
                    .ty(::swiftide::chat_completion::ParamType::String).build()
                    .expect("infallible")
                ],
            )
            .build()
            .unwrap()
    }
}
