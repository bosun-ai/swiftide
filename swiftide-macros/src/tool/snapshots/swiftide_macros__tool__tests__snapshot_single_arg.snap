---
source: swiftide-macros/src/tool/mod.rs
expression: "crate::test_utils::pretty_macro_output(&output)"
---
#[derive(
    ::swiftide::reexports::serde::Serialize,
    ::swiftide::reexports::serde::Deserialize
)]
struct SearchCodeArgs<'a> {
    pub code_query: &'a str,
}
#[derive(Clone, Default)]
pub struct SearchCode {}
/// Create a new instance of the tool as a boxed trait object
/// NOTE: Maybe we should have a separate `boxed` method for this?
pub fn search_code() -> Box<dyn ::swiftide::traits::Tool> {
    Box::new(SearchCode {})
}
impl SearchCode {
    pub async fn search_code(
        &self,
        context: &dyn AgentContext,
        code_query: &str,
    ) -> Result<ToolOutput> {
        return Ok("hello".into());
    }
}
#[::swiftide::reexports::async_trait::async_trait]
impl ::swiftide::traits::Tool for SearchCode {
    async fn invoke(
        &self,
        agent_context: &dyn ::swiftide::traits::AgentContext,
        raw_args: Option<&str>,
    ) -> ::swiftide::reexports::anyhow::Result<::swiftide::chat_completion::ToolOutput> {
        let Some(args) = raw_args else {
            ::swiftide::reexports::anyhow::bail!(
                "No arguments provided for {}", "search_code"
            )
        };
        let args: SearchCodeArgs = ::swiftide::reexports::serde_json::from_str(&args)?;
        return self.search_code(agent_context, args.code_query).await;
    }
    fn name(&self) -> &'static str {
        "search_code"
    }
    fn tool_spec(&self) -> ::swiftide::chat_completion::ToolSpec {
        swiftide::chat_completion::ToolSpec::builder()
            .name("search_code")
            .description("Hello world tool")
            .parameters(
                vec![
                    swiftide::chat_completion::ParamSpec::builder().name("code_query")
                    .description("my param description").build().expect("infallible")
                ],
            )
            .build()
            .unwrap()
    }
}
