---
source: swiftide-macros/src/tool/mod.rs
expression: "crate::test_utils::pretty_macro_output(&output)"
---
mod hidden {
    pub use ::anyhow::{bail, Result};
    pub use ::swiftide_core::chat_completion::{JsonSpec, ToolOutput};
    pub use ::swiftide_core::{Tool, AgentContext};
    pub use ::async_trait::async_trait;
}
#[derive(serde::Serialize, serde::Deserialize)]
struct SearchCodeArgs<'a> {
    pub code_query: &'a str,
}
#[derive(Clone, Default)]
pub struct SearchCode {}
pub fn search_code() -> SearchCode {
    SearchCode {}
}
impl SearchCode {
    pub async fn search_code(
        &self,
        context: &dyn AgentContext,
        code_query: &str,
    ) -> Result<ToolOutput> {
        return Ok("hello".into());
    }
}
#[hidden::async_trait]
impl hidden::Tool for SearchCode {
    async fn invoke(
        &self,
        agent_context: &dyn hidden::AgentContext,
        raw_args: Option<&str>,
    ) -> hidden::Result<hidden::ToolOutput> {
        let Some(args) = raw_args else {
            hidden::bail!("No arguments provided for {}", "search_code")
        };
        let args: SearchCodeArgs = serde_json::from_str(&args)?;
        return self.search_code(agent_context, args.code_query).await;
    }
    fn name(&self) -> &'static str {
        "search_code"
    }
    fn json_spec(&self) -> hidden::JsonSpec {
        "{\"description\":\"Hello world tool\",\"name\":\"search_code\",\"parameters\":{\"my param\":{\"description\":\"my param description\",\"type\":\"string\"}}}"
    }
}
