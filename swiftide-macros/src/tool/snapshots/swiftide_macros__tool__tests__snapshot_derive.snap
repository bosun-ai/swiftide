---
source: swiftide-macros/src/tool/mod.rs
expression: "crate::test_utils::pretty_macro_output(&output)"
---
#[async_trait::async_trait]
impl swiftide::chat_completion::Tool for HelloDerive {
    async fn invoke(
        &self,
        agent_context: &dyn swiftide::traits::AgentContext,
        raw_args: Option<&str>,
    ) -> std::result::Result<
        swiftide::chat_completion::ToolOutput,
        ::swiftide::chat_completion::errors::ToolError,
    > {
        return self.hello_derive(agent_context).await;
    }
    fn name<'TOOL>(&'TOOL self) -> std::borrow::Cow<'TOOL, str> {
        "hello_derive".into()
    }
    fn tool_spec(&self) -> swiftide::chat_completion::ToolSpec {
        swiftide::chat_completion::ToolSpec::builder()
            .name("hello_derive")
            .description("Hello derive")
            .build()
            .unwrap()
    }
}
impl<'TOOLBOXED> From<HelloDerive>
for Box<dyn ::swiftide::chat_completion::Tool + 'TOOLBOXED> {
    fn from(val: HelloDerive) -> Self {
        Box::new(val) as Box<dyn ::swiftide::chat_completion::Tool + 'TOOLBOXED>
    }
}
