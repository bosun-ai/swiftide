[package]
name = "swiftide"
version = "0.6.7"
edition = "2021"
license = "MIT"
readme = "../README.md"
keywords = ["llm", "rag", "ai", "data", "openai"]
description = "Blazing fast, streaming document and code indexation"
categories = ["asynchronous"]
repository = "https://github.com/bosun-ai/swiftide-rs"
homepage = "https://swiftide.rs"

[badges]

[dependencies]
# Local dependencies
swiftide-core = { path = "../swiftide-core" }
swiftide-integrations = { path = "../swiftide-integrations" }
swiftide-indexing = { path = "../swiftide-indexing" }

[features]
default = []
all = [
  "qdrant",
  "redis",
  "tree-sitter",
  "openai",
  "fastembed",
  "scraping",
  "aws-bedrock",
  "groq",
]
# Qdrant for storage
qdrant = ["swiftide-integrations/qdrant"]
# Redis for caching and storage
redis = ["swiftide-integrations/redis"]
# Tree-sitter for code operations and chunking
tree-sitter = [
  "swiftide-integrations/tree-sitter",
  "swiftide-indexing/tree-sitter",
]
# OpenAI for embedding and prompting
openai = ["swiftide-integrations/openai"]
# Groq prompting
groq = ["swiftide-integrations/groq"]
# FastEmbed (by qdrant) for fast, local embeddings
fastembed = ["swiftide-integrations/fastembed"]
# Scraping via spider as loader and a html to markdown transformer
scraping = ["swiftide-integrations/scraping"]
# AWS Bedrock for prompting
aws-bedrock = ["swiftide-integrations/aws-bedrock"]

[dev-dependencies]
swiftide-core = { path = "../swiftide-core", features = ["test-utils"] }

async-openai = { workspace = true }
qdrant-client = { workspace = true, default-features = false, features = [
  "serde",
] }

anyhow = { workspace = true }
test-log = { workspace = true }
testcontainers = { workspace = true }
mockall = { workspace = true }
temp-dir = { workspace = true }
wiremock = { workspace = true }
test-case = { workspace = true }
insta = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
tokio = { workspace = true }

[lints]
workspace = true

[package.metadata.docs.rs]
all-features = true
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]
rustdoc-args = ["--cfg", "docsrs"]
