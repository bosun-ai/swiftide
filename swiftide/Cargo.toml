[package]
name = "swiftide"
version.workspace = true
edition.workspace = true
license.workspace = true
readme.workspace = true
keywords.workspace = true
description.workspace = true
categories.workspace = true
repository.workspace = true
homepage.workspace = true

[badges]

[dependencies]
# Local dependencies
swiftide-core = { path = "../swiftide-core", version = "0.8" }
swiftide-integrations = { path = "../swiftide-integrations", version = "0.8" }
swiftide-indexing = { path = "../swiftide-indexing", version = "0.8" }
swiftide-query = { path = "../swiftide-query", version = "0.8" }

[features]
default = []
all = [
    "qdrant",
    "redis",
    "tree-sitter",
    "openai",
    "fastembed",
    "scraping",
    "aws-bedrock",
    "groq",
    "ollama",
]
# Qdrant for storage
qdrant = ["swiftide-integrations/qdrant"]
# Redis for caching and storage
redis = ["swiftide-integrations/redis"]
# Tree-sitter for code operations and chunking
tree-sitter = [
    "swiftide-integrations/tree-sitter",
    "swiftide-indexing/tree-sitter",
]
# OpenAI for embedding and prompting
openai = ["swiftide-integrations/openai"]
# Groq prompting
groq = ["swiftide-integrations/groq"]
# Ollama prompting
ollama = ["swiftide-integrations/ollama"]
# FastEmbed (by qdrant) for fast, local embeddings
fastembed = ["swiftide-integrations/fastembed"]
# Scraping via spider as loader and a html to markdown transformer
scraping = ["swiftide-integrations/scraping"]
# AWS Bedrock for prompting
aws-bedrock = ["swiftide-integrations/aws-bedrock"]

# Testing, internal only
test-utils = []

[dev-dependencies]
swiftide-core = { path = "../swiftide-core", features = ["test-utils"] }
swiftide-test-utils = { path = "../swiftide-test-utils" }

async-openai = { workspace = true }
qdrant-client = { workspace = true, default-features = false, features = [
    "serde",
] }

anyhow = { workspace = true }
test-log = { workspace = true }
testcontainers = { workspace = true }
mockall = { workspace = true }
temp-dir = { workspace = true }
wiremock = { workspace = true }
test-case = { workspace = true }
insta = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
tokio = { workspace = true }

[lints]
workspace = true

[package.metadata.docs.rs]
all-features = true
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]
rustdoc-args = ["--cfg", "docsrs"]
