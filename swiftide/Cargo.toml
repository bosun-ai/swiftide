[package]
name = "swiftide"
version.workspace = true
edition.workspace = true
license.workspace = true
readme.workspace = true
keywords.workspace = true
description.workspace = true
categories.workspace = true
repository.workspace = true
homepage.workspace = true

[badges]

[dependencies]
document-features = { workspace = true }

# Local dependencies
swiftide-core = { path = "../swiftide-core", version = "0.15" }
swiftide-integrations = { path = "../swiftide-integrations", version = "0.15" }
swiftide-indexing = { path = "../swiftide-indexing", version = "0.15" }
swiftide-query = { path = "../swiftide-query", version = "0.15" }
swiftide-agents = { path = "../swiftide-agents", version = "0.15", optional = true }

# Re-exports for macros and ease of use
anyhow.workspace = true
async-trait.workspace = true
serde.workspace = true
serde_json.workspace = true

[features]
default = []


all = [
  "qdrant",
  "redis",
  "tree-sitter",
  "openai",
  "fastembed",
  "scraping",
  "aws-bedrock",
  "groq",
  "ollama",
  "pgvector",
]

#! ### Integrations

## Enables Qdrant for storage and retrieval
qdrant = ["swiftide-integrations/qdrant", "swiftide-core/qdrant"]

## Enables PgVector for storage and retrieval
pgvector = ["swiftide-integrations/pgvector"]

## Enables Redis as an indexing cache and storage
redis = ["swiftide-integrations/redis"]

## Tree-sitter for various code transformers
tree-sitter = [
  "swiftide-integrations/tree-sitter",
  "swiftide-indexing/tree-sitter",
]

## OpenAI for embedding and prompting
openai = ["swiftide-integrations/openai"]

## Groq prompting
groq = ["swiftide-integrations/groq"]

## Ollama prompting
ollama = ["swiftide-integrations/ollama"]

## FastEmbed (by qdrant) for fast, local, sparse and dense embeddings
fastembed = ["swiftide-integrations/fastembed"]

## Scraping via spider as loader and a html to markdown transformer
scraping = ["swiftide-integrations/scraping"]

## AWS Bedrock for prompting
aws-bedrock = ["swiftide-integrations/aws-bedrock"]

## Lancdb for persistance and querying
lancedb = ["swiftide-integrations/lancedb"]

## Fluvio loader
fluvio = ["swiftide-integrations/fluvio"]

## Parquet loader
parquet = ["swiftide-integrations/parquet"]

## Redb embeddable nodecache
redb = ["swiftide-integrations/redb"]

#! ### Other features

## Various testing utilities
test-utils = ["swiftide-core/test-utils", "swiftide-test-utils/test-utils"]

#! ### Experimental
swiftide-agents = ["dep:swiftide-agents"]

[dev-dependencies]
swiftide-core = { path = "../swiftide-core", features = ["test-utils"] }
swiftide-test-utils = { path = "../swiftide-test-utils" }

async-openai = { workspace = true }
qdrant-client = { workspace = true, default-features = false, features = [
  "serde",
] }

anyhow = { workspace = true }
test-log = { workspace = true }
testcontainers = { workspace = true }
mockall = { workspace = true }
temp-dir = { workspace = true }
wiremock = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
tokio = { workspace = true }
arrow-array = { workspace = true }
sqlx = { workspace = true }

[lints]
workspace = true

[package.metadata.docs.rs]
all-features = true
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]
rustdoc-args = ["--cfg", "docsrs"]
