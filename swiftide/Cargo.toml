[package]
name = "swiftide"
version = "0.6.6"
edition = "2021"
license = "MIT"
readme = "../README.md"
keywords = ["llm", "rag", "ai", "data", "openai"]
description = "Blazing fast, streaming document and code indexation"
categories = ["asynchronous"]
repository = "https://github.com/bosun-ai/swiftide-rs"
homepage = "https://swiftide.rs"

[badges]

[dependencies]
anyhow = { workspace = true }
async-trait = { workspace = true }
derive_builder = { workspace = true }
futures-util = { workspace = true }
tokio = { workspace = true, features = ["full"] }
tokio-stream = { workspace = true }
num_cpus = { workspace = true }
tracing = { workspace = true }
itertools = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
strum = { workspace = true }
strum_macros = { workspace = true }
indoc = { workspace = true }

ignore = "0.4"
text-splitter = { version = "0.14", features = ["markdown"] }

# Local dependencies
swiftide-core = { path = "../swiftide-core" }
swiftide-integrations = { path = "../swiftide-integrations" }

[features]
default = []
all = ["qdrant", "redis", "tree-sitter", "openai", "fastembed"]
# Qdrant for storage
qdrant = ["swiftide-integrations/qdrant"]
# Redis for caching and storage
redis = ["swiftide-integrations/redis"]
# Tree-sitter for code operations and chunking
tree-sitter = ["swiftide-integrations/tree-sitter"]
# OpenAI for embedding and prompting
openai = ["swiftide-integrations/openai"]
# Groq prompting
groq = ["swiftide-integrations/groq"]
# FastEmbed (by qdrant) for fast, local embeddings
fastembed = ["swiftide-integrations/fastembed"]
# Scraping via spider as loader and a html to markdown transformer
scraping = ["swiftide-integrations/scraping"]
# AWS Bedrock for prompting
aws-bedrock = ["swiftide-integrations/aws-bedrock"]

[dev-dependencies]
swiftide-core = { path = "../swiftide-core", features = ["test-utils"] }

async-openai = { workspace = true }
qdrant-client = { workspace = true, default-features = false, features = [
  "serde",
] }

test-log = { workspace = true }
testcontainers = { workspace = true }
mockall = { workspace = true }
temp-dir = { workspace = true }
wiremock = { workspace = true }
test-case = { workspace = true }
insta = { workspace = true }

[lints]
workspace = true

[package.metadata.docs.rs]
all-features = true
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]
