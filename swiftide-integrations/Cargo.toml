[package]
name = "swiftide-integrations"
version.workspace = true
edition.workspace = true
license.workspace = true
readme.workspace = true
keywords.workspace = true
description.workspace = true
categories.workspace = true
repository.workspace = true
homepage.workspace = true

[dependencies]
swiftide-core = { path = "../swiftide-core", version = "0.9" }
swiftide-macros = { path = "../swiftide-macros", version = "0.9" }

anyhow = { workspace = true }
async-trait = { workspace = true }
derive_builder = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
tokio = { workspace = true, features = ["full"] }
tracing = { workspace = true }
itertools = { workspace = true }
chrono = { workspace = true }
strum = { workspace = true }
strum_macros = { workspace = true }
regex = { workspace = true }
futures-util = { workspace = true }


# Integrations
async-openai = { workspace = true, optional = true }
qdrant-client = { workspace = true, optional = true, default-features = false, features = [
  "serde",
] }
redis = { version = "0.26", features = [
  "aio",
  "tokio-comp",
  "connection-manager",
  "tokio-rustls-comp",
], optional = true }
tree-sitter = { version = "0.22", optional = true }
tree-sitter-rust = { version = "0.21", optional = true }
tree-sitter-python = { version = "0.21", optional = true }
tree-sitter-ruby = { version = "0.21", optional = true }
tree-sitter-typescript = { version = "0.21", optional = true }
tree-sitter-javascript = { version = "0.21", optional = true }
fastembed = { version = "4.0", optional = true }
spider = { workspace = true, optional = true }
htmd = { version = "0.1", optional = true }
aws-config = { version = "1.5", features = [
  "behavior-version-latest",
], optional = true }
aws-credential-types = { version = "1.2", features = [
  "hardcoded-credentials",
], optional = true }
aws-sdk-bedrockruntime = { version = "1.37", features = [
  "behavior-version-latest",
], optional = true }
secrecy = { version = "0.8.0", optional = true }
reqwest = { version = "0.12.5", optional = true, default-features = false }
ollama-rs = { version = "0.2.0", optional = true }
# Unfortunately their rustls version fails to compile
# fluvio = { version = "0.23", default-features = false, features = [
#   "compress",
#   "rustls",
# ], optional = true }
fluvio = { version = "0.23", optional = true }

[dev-dependencies]
swiftide-core = { path = "../swiftide-core", features = ["test-utils"] }

# Used for hacking fluv to play nice
flv-util = "0.5.2"

mockall = { workspace = true }
test-log = { workspace = true }
testcontainers = { workspace = true }
test-case = { workspace = true }
indoc = { workspace = true }
insta = { workspace = true }

[features]
default = ["rustls"]
# Ensures rustls is used
rustls = ["reqwest/rustls-tls-native-roots"]
# Qdrant for storage
qdrant = ["dep:qdrant-client"]
# Redis for caching and storage
redis = ["dep:redis"]
# Tree-sitter for code operations and chunking
tree-sitter = [
  "dep:tree-sitter",
  "dep:tree-sitter-rust",
  "dep:tree-sitter-python",
  "dep:tree-sitter-ruby",
  "dep:tree-sitter-typescript",
  "dep:tree-sitter-javascript",
]
# OpenAI for embedding and prompting
openai = ["dep:async-openai"]
# Groq prompting
groq = ["dep:async-openai", "dep:secrecy", "dep:reqwest"]
# Ollama prompting
ollama = ["dep:ollama-rs"]
# FastEmbed (by qdrant) for fast, local embeddings
fastembed = ["dep:fastembed"]
# Scraping via spider as loader and a html to markdown transformer
scraping = ["dep:spider", "dep:htmd"]
# AWS Bedrock for prompting
aws-bedrock = [
  "dep:aws-config",
  "dep:aws-credential-types",
  "dep:aws-sdk-bedrockruntime",
]
# Fluvio loader
fluvio = ["dep:fluvio"]

[lints]
workspace = true
