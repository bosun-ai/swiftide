[package]
name = "swiftide-integrations"
version.workspace = true
edition.workspace = true
license.workspace = true
readme.workspace = true
keywords.workspace = true
description.workspace = true
categories.workspace = true
repository.workspace = true
homepage.workspace = true

[dependencies]
swiftide-core = { path = "../swiftide-core", version = "0.25" }
swiftide-macros = { path = "../swiftide-macros", version = "0.25" }

anyhow = { workspace = true }
async-trait = { workspace = true }
derive_builder = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
tokio = { workspace = true, features = ["full"] }
tracing = { workspace = true }
itertools = { workspace = true }
chrono = { workspace = true }
strum = { workspace = true }
strum_macros = { workspace = true }
regex = { workspace = true }
futures-util = { workspace = true }
tera = { workspace = true }
uuid = { workspace = true }

# Integrations
async-openai = { workspace = true, optional = true }
async-anthropic = { workspace = true, optional = true }
qdrant-client = { workspace = true, optional = true, default-features = false, features = [
  "serde",
] }
sqlx = { workspace = true, optional = true, features = [
  "any",
  "json",
  "macros",
  "postgres",
  "runtime-tokio",
  "chrono",
  "uuid",
] }
pgvector = { workspace = true, optional = true, features = ["sqlx"] }
redis = { workspace = true, features = [
  "aio",
  "tokio-comp",
  "connection-manager",
  "tokio-rustls-comp",
], optional = true }
tree-sitter = { workspace = true, optional = true }
tree-sitter-rust = { workspace = true, optional = true }
tree-sitter-python = { workspace = true, optional = true }
tree-sitter-ruby = { workspace = true, optional = true }
tree-sitter-typescript = { workspace = true, optional = true }
tree-sitter-javascript = { workspace = true, optional = true }
tree-sitter-java = { workspace = true, optional = true }
tree-sitter-go = { workspace = true, optional = true }
tree-sitter-solidity = { workspace = true, optional = true }
tree-sitter-c = { workspace = true, optional = true }
tree-sitter-cpp = { workspace = true, optional = true }

fastembed = { workspace = true, optional = true }
spider = { workspace = true, optional = true, default-features = true }
htmd = { workspace = true, optional = true }
aws-config = { workspace = true, features = [
  "behavior-version-latest",
], optional = true }
aws-credential-types = { workspace = true, features = [
  "hardcoded-credentials",
], optional = true }
aws-sdk-bedrockruntime = { workspace = true, features = [
  "behavior-version-latest",
], optional = true }
secrecy = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true }
deadpool = { workspace = true, features = [
  "managed",
  "rt_tokio_1",
], optional = true }
fluvio = { workspace = true, optional = true }
arrow-array = { workspace = true, optional = true }
lancedb = { workspace = true, optional = true }
parquet = { workspace = true, optional = true, features = [
  "async",
  "arrow",
  "snap",
] }
redb = { workspace = true, optional = true }
duckdb = { workspace = true, optional = true }
libduckdb-sys = { workspace = true, optional = true }
fs-err = { workspace = true, features = ["tokio"] }
tiktoken-rs = { workspace = true, optional = true }

[dev-dependencies]
swiftide-core = { path = "../swiftide-core", features = ["test-utils"] }
swiftide-test-utils = { path = "../swiftide-test-utils", features = [
  "test-utils",
] }
swiftide-macros = { path = "../swiftide-macros" }
temp-dir = { workspace = true }
pretty_assertions = { workspace = true }
# arrow = { workspace = true, features = ["test_utils"] }
duckdb = { workspace = true, features = ["bundled"] }
libduckdb-sys = { workspace = true, features = [
  "bundled",
  "vcpkg",
  "pkg-config",
] }

# Used for hacking fluv to play nice
flv-util = { workspace = true }

mockall = { workspace = true }
test-log = { workspace = true }
testcontainers = { workspace = true }
test-case = { workspace = true }
indoc = { workspace = true }
insta = { workspace = true }
wiremock = { workspace = true }


[features]
default = ["rustls"]
# Ensures rustls is used
rustls = ["reqwest?/rustls-tls-native-roots", "fastembed?/hf-hub-native-tls"]
# Qdrant for storage
qdrant = ["dep:qdrant-client", "swiftide-core/qdrant", "chrono/now"]
# PgVector for storage
pgvector = ["dep:sqlx", "dep:pgvector"]
# Redis for caching and storage
redis = ["dep:redis"]
# Tree-sitter for code operations and chunking
tree-sitter = [
  "dep:tree-sitter",
  "dep:tree-sitter-rust",
  "dep:tree-sitter-python",
  "dep:tree-sitter-ruby",
  "dep:tree-sitter-typescript",
  "dep:tree-sitter-javascript",
  "dep:tree-sitter-java",
  "dep:tree-sitter-go",
  "dep:tree-sitter-solidity",
  "dep:tree-sitter-c",
  "dep:tree-sitter-cpp",
]
# OpenAI for embedding and prompting
openai = ["dep:async-openai", "tiktoken-rs?/async-openai"]
# Groq prompting
groq = ["dep:async-openai", "dep:secrecy", "dep:reqwest", "openai"]
# Ollama prompting, embedding, chatcompletion
ollama = ["dep:async-openai", "dep:secrecy", "dep:reqwest", "openai"]
# Openrouter prompting, embedding, chatcompletion
open-router = ["dep:async-openai", "dep:secrecy", "dep:reqwest", "openai"]
# FastEmbed (by qdrant) for fast, local embeddings
fastembed = [
  "dep:fastembed",
  "fastembed/ort-download-binaries",
  "fastembed/hf-hub",
]
# Dashscope prompting
dashscope = ["dep:async-openai", "dep:secrecy", "dep:reqwest", "openai"]
# Scraping via spider as loader and a html to markdown transformer
scraping = ["dep:spider", "dep:htmd"]
# AWS Bedrock for prompting
aws-bedrock = [
  "dep:aws-config",
  "dep:aws-credential-types",
  "dep:aws-sdk-bedrockruntime",
]
lancedb = ["dep:lancedb", "dep:deadpool", "dep:arrow-array"]
# Fluvio loader
fluvio = ["dep:fluvio"]
# Paruqet loader
parquet = ["dep:arrow-array", "dep:parquet"]
# Anthropic for prompting and completions
anthropic = ["dep:async-anthropic"]
# Duckdb for indexing and retrieval
duckdb = ["dep:duckdb", "dep:libduckdb-sys"]
tiktoken = ["dep:tiktoken-rs"]


[lints]
workspace = true

[package.metadata.docs.rs]
all-features = true
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]
rustdoc-args = ["--cfg", "docsrs"]
